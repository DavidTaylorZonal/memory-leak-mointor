apply plugin: "com.android.library"
apply plugin: "org.jetbrains.kotlin.android"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

android {
   ndkVersion rootProject.ext.ndkVersion
   buildToolsVersion rootProject.ext.buildToolsVersion
   compileSdk rootProject.ext.compileSdkVersion

   namespace 'expo.modules.memoryleakmointor'
   defaultConfig {
       minSdkVersion rootProject.ext.minSdkVersion
       targetSdkVersion rootProject.ext.targetSdkVersion
       versionCode 1
       versionName "0.1.0"
   }

   buildTypes {
       release {
           minifyEnabled false
           proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
       }
   }

   lintOptions {
       abortOnError false
   }

   packagingOptions {
       jniLibs {
           useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
       }
   }
   androidResources {
       ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
   }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
   def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
   for (i in 0..<options.size()) options[i] = options[i].trim();
   options -= ""

   if (options.length > 0) {
       println "android.packagingOptions.$prop += $options ($options.length)"
       options.each {
           android.packagingOptions[prop] += it
       }
   }
}

dependencies {
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
   implementation "expo.modules.kotlin:kotlin:+"
   implementation "androidx.core:core-ktx:1.9.0"

   // For better activity and lifecycle management
   implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"
   implementation "androidx.activity:activity-ktx:1.7.0"
   
   // For better memory metrics
   implementation "androidx.lifecycle:lifecycle-process:2.6.1"

   def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
   def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
   def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

   if (isGifEnabled) {
       implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
   }

   if (isWebpEnabled) {
       implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
       if (isWebpAnimatedEnabled) {
           implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
       }
   }
}